#jinja2: lstrip_blocks: "True"
global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 expose-fd listeners level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # modern configuration from
    #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
    
    # NOTE: Not using the modern setting as the jitsi mobile app won't support it

    # intermediate configuration
    ssl-default-bind-curves X25519:prime256v1:secp384r1
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers ssl-min-ver TLSv1.2 no-tls-tickets

    ssl-default-server-curves X25519:prime256v1:secp384r1
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    ssl-dh-param-file /var/lib/dhparam

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  dontlog-normal

    timeout connect 5000
    timeout client  50000
    timeout server  50000

    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Authentication
{% for group in hap_auth %}
userlist {{ group.group }}
    {% for user in group.users %}
    user {{ user.name }} password {{ user.password | password_hash(hashtype='sha256', rounds=1000) }}
    {% endfor %}
{% endfor %}

cache global_cache
  total-max-size 512 # 512 MB
  max-object-size 102400 # 100 KB
  max-age 600 # Stay in cache for 10 minutes
  process-vary on
  max-secondary-entries 12


listen stats
    bind 127.0.0.1:32700
    stats enable
    stats uri /
    stats hide-version
    stats auth {{ hap_stats_user }}:{{ hap_stats_password }}

frontend prometheus
    bind 127.0.0.1:9142
    mode http
    no log
    http-request use-service prometheus-exporter if { path /metrics }

{% if hap_sites and hap_sites|length > 0 %}
frontend http
    bind [::]:80 v4v6

    {% if not hap_sites_insecure %}
    bind [::]:443 v4v6 ssl crt /etc/certificates/ alpn h2,http/1.1
    {% endif %}
    mode http

    default_backend default

    # ACL function declarations for Rate Limits
    capture request  header Host len 20
    capture response header Location len 20
    
    acl is_abuse src_http_req_rate(Abuse) ge {{ hap_rate_limit_per_min }}
    acl inc_abuse_cnt src_inc_gpc0(Abuse) gt 0  # Increments counter GPC0 (general purpose counter 0) by one when called/matched - Activates limiter
    acl abuse_cnt src_get_gpc0(Abuse) gt 0      # Query GPC0 for > 0 - checks on limiter

    ### Rate limiter
    tcp-request connection track-sc0 src table Abuse
    tcp-request connection reject if abuse_cnt !{ src -f /etc/haproxy/allowlist.acl }
    
    http-request track-sc0 src table Abuse
    http-request reject if abuse_cnt !{ src -f /etc/haproxy/allowlist.acl }

    # Tarpit ratelimited requests for 10s
    timeout tarpit 10s

    {% for item in hap_rate_limit_targets %}

    # Rate limiter ACL for {{ item.name }}
    acl ratehost_{{ item.name }} hdr(host) -i {{ item.domain }}
    acl ratehost_{{ item.name }} hdr(host) -i {{ item.domain }}:80
    acl ratehost_{{ item.name }} hdr(host) -i {{ item.domain }}:443
    http-request tarpit deny_status 429 if ratehost_{{ item.name }} is_abuse inc_abuse_cnt !{ src -f /etc/haproxy/allowlist.acl }
    {% endfor %}


    # HSTS (63072000 seconds)
    http-response set-header Strict-Transport-Security max-age=63072000

    {% for site in hap_sites %}

    # START SITE: {{ site }}
    {% for domain in hap_sites[site].domains %}
    acl host_{{ site }} hdr(host) -i {{ domain }}
    acl host_{{ site }} hdr(host) -i {{ domain }}:80
    acl host_{{ site }} hdr(host) -i {{ domain }}:443
    {% endfor %}
    
    {% if hap_sites[site].path is defined %}
    acl path_{{ item }} path -i -m beg {{ hap_sites[site].path }}
    {% endif %}
    {% if hap_sites[site].use_cache is defined and hap_sites[site].use_cache == 'true' %}
    http-request cache-use global_cache if host_{{ site }}
    http-response cache-store global_cache if host_{{ site }}
    {% endif %}

    use_backend {{ site }} if host_{{ site }} {% if hap_sites[site].path is defined %} path_{{ site }}{% endif %}

    # END SITE: {{ site }}

   {% endfor %}
   {% for cluster in hap_k8s_services %}

   {% for svc in cluster.resources if svc.metadata.annotations["ethquokkaops.io/expose-public"] is defined and svc.metadata.annotations["ethquokkaops.io/domain"] is defined %}

    # START SITE: {{ cluster.item }} => {{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    {% set domains = svc.metadata.annotations["ethquokkaops.io/domain"].split(',') | map('trim') | list %}
    {% for domain in domains %}
    {% if svc.metadata.annotations["ethquokkaops.io/match-exact"] is defined %}
    acl host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} hdr(host) -i {{ domain }}
    {% else %}
    acl host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} hdr_dom(host) -i {{ domain }}
    {% if svc.metadata.annotations["ethquokkaops.io/allow-subdomains"] is defined %}
    acl host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} hdr_dom(host) -i -m end .{{ domain }}
    {% endif %}
    {% endif %}
    
    {% endfor %}
    
    {% if svc.metadata.annotations["ethquokkaops.io/auth-group"] is defined %}
    http-request auth if host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} !{ http_auth({{ svc.metadata.annotations["ethquokkaops.io/auth-group"] }}) }
    {% endif %}
    
    {% if svc.metadata.annotations["ethquokkaops.io/path"] is defined %}
    acl path_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} path -i -m beg {{ svc.metadata.annotations["ethquokkaops.io/path"] }}
    {% endif %}
    
    {% if svc.metadata.annotations["ethquokkaops.io/internal-only"] is defined %}
    http-request deny if { hdr(host) -i {{ domain }} } !{ src 10.128.0.0/9 }
    {% endif %}

    {% if svc.metadata.annotations["ethquokkaops.io/use_cache"] is defined and svc.metadata.annotations["ethquokkaops.io/use_cache"] == 'true' %}
    http-request cache-use global_cache if host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    http-response cache-store global_cache if host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    {% endif %}

    use_backend {{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} if host_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }} {% if svc.metadata.annotations["ethquokkaops.io/path"] is defined %} path_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}{% endif %}

    # END SITE: {{ svc.metadata.namespace }}_{{ svc.metadata.name }}

   {% endfor %}
   {% endfor %}


   {# Group services by domain for load balancing #}
   {% set domain_groups = {} %}
   {% for host, hostvars in lb_hostvars.items() %}
   {% for svc in hostvars.services if svc.custom_fields.expose_mode is defined and svc.custom_fields.expose_mode == "l7" %}
   {% set domains = svc.custom_fields.expose_domain.split(',') | map('trim') | list %}
   {% for domain in domains %}
   {% if domain not in domain_groups %}
   {% set _ = domain_groups.update({domain: []}) %}
   {% endif %}
   {% set _ = domain_groups[domain].append({'host': host, 'svc': svc, 'hostvars': hostvars}) %}
   {% endfor %}
   {% endfor %}
   {% endfor %}

   {# Generate ACLs and routing for each domain group #}
   {% for domain, services in domain_groups.items() %}
   {% set first_service = services[0] %}
   {% set backend_name = 'lb_' + (domain | replace('.', '_') | replace('-', '_')) %}

    # START DOMAIN GROUP: {{ domain }} ({{ services | length }} service(s))
    acl host_{{ backend_name }} hdr_dom(host) -i {{ domain }}
   
    {% if first_service.svc.custom_fields.internal_only is defined and first_service.svc.custom_fields.internal_only == "true" %}
    http-request deny if { hdr(host) -i {{ domain }} } !{ src 10.128.0.0/9 }
    {% endif %}

    {% if first_service.svc.custom_fields.expose_auth is defined and first_service.svc.custom_fields.expose_auth != "none" and first_service.svc.custom_fields.expose_auth != "" and first_service.svc.custom_fields.expose_auth is not none %}
    http-request auth if host_{{ backend_name }} !{ http_auth({{ first_service.svc.custom_fields.expose_auth }}) }
    {% endif %}

    use_backend {{ backend_name }} if host_{{ backend_name }}

    # END DOMAIN GROUP: {{ domain }}

   {% endfor %}
{% endif %}

### TCP Frontends

{% for tun in hap_tunnels %}
frontend fe_{{ tun }}
    bind [::]:{{ hap_tunnels[tun].port }} v4v6
    mode tcp
    option tcplog
    default_backend tcp_{{ tun }}
{% endfor %}

{% for cluster in hap_k8s_services %}
{% for svc in cluster.resources if svc.metadata.annotations["ethquokkaops.io/expose-tcp"] is defined %} 

frontend fe_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    bind [::]:{{ svc.metadata.annotations["ethquokkaops.io/expose-on-port"] }} v4v6
    mode tcp
    option tcplog
    default_backend tcp_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}

{% endfor %}
{% endfor %}


############
# BACKENDS #
############

backend Abuse
    stick-table type ip size 100K expire 30m store gpc0,http_req_rate(60s)

# Certbot backend
# Contains certbot stand-alone webserver
backend backend-certbot
    mode http
    server certbot 127.0.0.1:7080

backend default
    balance roundrobin
    option forwardfor
    option http-server-close

    # Redirects

    {% if hap_redirects is defined %}
    {% for redirect in hap_redirects %}

    {% if redirect.match is defined %}
    acl redir_match_{{ loop.index }} path_reg {{ redirect.match }}
    http-request redirect code 301 location {{ redirect.dest }} if redir_match_{{ loop.index }}
    {% endif %}

    {% if redirect.domain is defined %}
    acl redir_host_{{ loop.index }} hdr(host) -i {{ redirect.domain }}
    acl redir_host_{{ loop.index }} hdr(host) -i {{ redirect.domain }}:80
    acl redir_host_{{ loop.index }} hdr(host) -i {{ redirect.domain }}:443
    http-request redirect code 301 location {{ redirect.dest }} if redir_host_{{ loop.index }}
    {% endif %}

    {% endfor %}
    {% endif %}


{% for site in hap_sites %}
backend {{ site }}
    balance roundrobin
    option forwardfor
    option forwarded
    
    # keep websockets around for 2h
    timeout tunnel 2h

    # only keep clients in the connection queue for 1 minute
    timeout queue 60s

    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    # Enable compression towards the client
    filter compression
    compression algo gzip
    compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
    compression offload

    {% if hap_sites[site]["auth"] is defined %}
    acl basic-auth http_auth({{ hap_sites[site]["auth"] }})
    http-request auth realm {{ site }} unless basic-auth
    http-request del-header Authorization
    {% endif %}

    {% if hap_sites[site]["set_path"] is defined %}
    http-request set-path {{ hap_sites[site]["set_path"] }}
    {% endif %}


    {% if hap_sites[site]["use_sticky"] is defined %}
    cookie SERVER_USED insert indirect nocache
    {% endif %}

    default-server check maxconn {{ hap_sites[site].max_conn | default('30') }} fall 3 rise 2 {{ 'ssl verify none' if hap_sites[site].sslbackend is defined else '' }} {{ 'alpn h2,http/1.1' if internalsites[site].http2 is defined else '' }} {{ 'cookie s' if hap_sites[site]["use_sticky"] is defined }}{{ loop.index if hap_sites[site]["use_sticky"] is defined }}


    {% if hap_clusters[hap_sites[site].cluster]["nodes"] is defined %}
    {% for server in hap_clusters[hap_sites[site].cluster].nodes %}
    server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_sites[site].port | default(hap_clusters[hap_sites[site].cluster].defaultPort | default('80')) }} 
    {% endfor %}
    {% endif %}

    {% if hap_clusters[hap_sites[site].cluster]["nodeGroup"] is defined %}
    {% for server in groups[hap_clusters[hap_sites[site].cluster].nodeGroup] %}
    server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_sites[site].port | default(hap_clusters[hap_sites[site].cluster].defaultPort | default('80')) }} 
    {% endfor %}
    {% endif %}
    
    {% if hap_clusters[hap_sites[site].cluster]["nodeGroups"] is defined %}
        # Using nodegroups
        {% set first_group = hap_clusters[hap_sites[site].cluster].nodeGroups[0] %}
        {% set target_servers = groups[first_group] | intersect(hap_clusters[hap_sites[site].cluster].nodeGroups[1:] | map('extract', groups) | list) %}
        {% for server in target_servers %}
        server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_sites[site].port | default(hap_clusters[hap_sites[site].cluster].defaultPort | default('80')) }} 
        {% endfor %}
    {% endif %}


{% endfor %}

{% for cluster in hap_k8s_services %}
{% for svc in cluster.resources if svc.metadata.annotations["ethquokkaops.io/expose-public"] is defined and svc.metadata.annotations["ethquokkaops.io/domain"] is defined %}

backend {{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    balance roundrobin
    option forwardfor
    option forwarded
    
    # keep websockets around for 2h
    timeout tunnel 2h

    # only keep clients in the connection queue for 1 minute
    timeout queue 60s

    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    # Enable compression towards the client
    filter compression
    compression algo gzip
    compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
    compression offload


    {% if svc.metadata.annotations["ethquokkaops.io/sticky"] is defined and svc.metadata.annotations["ethquokkaops.io/sticky"] == 'true' %}
    cookie SERVER_USED insert indirect nocache
    {% endif %}

    default-server check maxconn {{ svc.metadata.annotations["ethquokkaops.io/max-conn"] | default('30') }} fall 3 rise 2 {{ 'ssl verify none' if svc.metadata.annotations["ethquokkaops.io/ssl-backend"] is defined else '' }} {{ 'alpn h2,http/1.1' if svc.metadata.annotations["ethquokkaops.io/http2-backend"] is defined else '' }} {{ 'cookie s' if svc.metadata.annotations["ethquokkaops.io/sticky"] is defined }}{{ loop.index if svc.metadata.annotations["ethquokkaops.io/sticky"] is defined }}


    server metallb_{{ svc.metadata.name }} {{ svc.status.loadBalancer.ingress[0].ip}}:{{ svc.spec.ports[0].port }}

{% endfor %}

{% for svc in cluster.resources if svc.metadata.annotations["ethquokkaops.io/expose-tcp"] is defined %}
backend tcp_{{ cluster.item }}_{{ svc.metadata.namespace }}_{{ svc.metadata.name }}
    mode tcp
    balance roundrobin

    default-server check maxconn {{ svc.metadata.annotations["ethquokkaops.io/max-conn"] | default('30') }} fall 3 rise 2
    server metallb_{{ svc.metadata.name }} {{ svc.status.loadBalancer.ingress[0].ip}}:{{ svc.metadata.annotations["ethquokkaops.io/service-port"] | default(svc.spec.ports[0].port) }}
{% endfor %}
{% endfor %}


{% if hap_tunnels is defined %}
{% for tun in hap_tunnels %}

backend tcp_{{ tun }}
    mode tcp
    balance roundrobin

    default-server check maxconn {{ hap_tunnels[tun].maxconn | default('30') }} fall 3 rise 2

    {% if hap_clusters[hap_tunnels[tun].cluster]["nodes"] is defined %}
    {% for server in hap_clusters[hap_tunnels[tun].cluster].nodes %}
    server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_tunnels[tun].cluster_port }} 
    {% endfor %}
    {% endif %}
    
    {% if hap_clusters[hap_tunnels[tun].cluster]["nodeGroup"] is defined %}
    {% for server in groups[hap_clusters[hap_tunnels[tun].cluster].nodeGroup] %}
    server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_tunnels[tun].cluster_port }} 
    {% endfor %}
    {% endif %}
    
    {% if hap_clusters[hap_tunnels[tun].cluster]["nodeGroups"] is defined %}
    # using nodegroups
    
    {% set node_groups = hap_clusters[hap_tunnels[tun].cluster].nodeGroups %}
    {% if node_groups | length > 0 %}
      {% set outer_target_servers = groups[node_groups[0]] %}

      {% set ns = namespace(servers=outer_target_servers) %}
      # start group {{ node_groups[0] }}
      {% for group_name in node_groups[1:] %}
      # intersecting {{ group_name }}
          {% set ns.servers = ns.servers | intersect(groups[group_name]) %}
      {% endfor %}
      {% set target_servers = ns.servers %}
    {% else %}
      {% set target_servers = [] %}
    {% endif %}
    # FINAL: {{ target_servers | join(', ')}}
    {% for server in target_servers %}
    server {{ server }} {{ lb_hostvars[server]["primary_ip4"] }}:{{ hap_tunnels[tun].cluster_port }} 
    {% endfor %}
    {% endif %}

{% endfor %}
{% endif %}

{# Create shared backends for load balancing services with same domain #}
{% for domain, services in domain_groups.items() %}
{% set backend_name = 'lb_' + (domain | replace('.', '_') | replace('-', '_')) %}
backend {{ backend_name }}
    option forwardfor
    option forwarded
    
    # keep websockets around for 2h
    timeout tunnel 2h

    # only keep clients in the connection queue for 1 minute
    timeout queue 60s

    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    # Enable compression towards the client
    filter compression
    compression algo gzip
    compression type text/css text/html text/javascript application/javascript text/plain text/xml application/json
    compression offload

    default-server check fall 3 rise 2
    
    {% if service_info.svc.balance_mode is defined and service_info.svc.balance_mode == "backup" %}
    balance first
    # Special health check that verifies mirror status
    option httpchk GET /status
    http-check expect string READY
    
    # Load balanced servers for domain: {{ domain }}
    {% for service_info in services %}
    {% if loop.first %}
    server {{ service_info.host }}_{{ service_info.svc.name }} {{ service_info.hostvars.primary_ip4 }}:{{ service_info.svc.ports[0] }}
    {% else %}
    server {{ service_info.host }}_{{ service_info.svc.name }} {{ service_info.hostvars.primary_ip4 }}:{{ service_info.svc.ports[0] }} backup
    {% endif %}
    {% endfor %}

    {% else %}
    balance roundrobin
    
    # Load balanced servers for domain: {{ domain }}
    {% for service_info in services %}
    server {{ service_info.host }}_{{ service_info.svc.name }} {{ service_info.hostvars.primary_ip4 }}:{{ service_info.svc.ports[0] }}
    {% endfor %}
    {% endif %}

{% endfor %}
